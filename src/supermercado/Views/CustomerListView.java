/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package supermercado.Views;

import supermercado.Controllers.CategoryController;
import supermercado.Controllers.CustomerController;


import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import supermercado.Models.Customer;
import supermercado.Models.Category;
/**
 *
 * @author user
 */
public class CustomerListView extends javax.swing.JFrame {
     
     List<Customer> customers = new ArrayList<>();
     List<Category> categories  = new ArrayList<>();
    /**
     * Creates new form CustomerListView
     */
    public CustomerListView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboCategory = new javax.swing.JComboBox<>();
        jBtnFilter = new javax.swing.JButton();
        labelSelectCategory = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCustomer = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        comboCategory.setName(""); // NOI18N
        comboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoryActionPerformed(evt);
            }
        });

        jBtnFilter.setText("Filtrar");
        jBtnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnFilterActionPerformed(evt);
            }
        });

        labelSelectCategory.setText("Seleccione Categoria");

        jTableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Last Name", "Identificacion", "Categoria"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCustomer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelSelectCategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                        .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(jBtnFilter)))
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnFilter)
                    .addComponent(labelSelectCategory))
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoryActionPerformed
        
             
    }//GEN-LAST:event_comboCategoryActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        customers = CustomerController.allCustomer();        
        categories  = CategoryController.allCategory();
        System.out.println("Datos de la Vista");       
        loadCategoryJcombox(comboCategory, categories);
        loadCustomerJTable(jTableCustomer, customers);
    }//GEN-LAST:event_formComponentShown

    private void jBtnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnFilterActionPerformed
        String searchName = comboCategory.getSelectedItem().toString();
        Category foundCategory = null;
        for (Category category : categories) {
            if (category.getDescription().equals(searchName)) {
                foundCategory = category;
                break;
            }
        }
        if (foundCategory != null) {        
            customers = CustomerController.filterCustomerByCategory(foundCategory.getId());        
        } else {
            customers = CustomerController.allCustomer();
        }
        loadCustomerJTable(jTableCustomer, customers);
    }//GEN-LAST:event_jBtnFilterActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboCategory;
    private javax.swing.JButton jBtnFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCustomer;
    private javax.swing.JLabel labelSelectCategory;
    // End of variables declaration//GEN-END:variables

    private void loadCategoryJcombox(JComboBox c, List<Category> categories) {
        DefaultComboBoxModel combo = new DefaultComboBoxModel();
        c.setModel(combo);
        combo.addElement("Todos");
        for (Category category : categories) {
            combo.addElement(category.getDescription());            
            System.out.println(category.getDescription());
        }   
    }

    private void loadCustomerJTable(JTable t, List<Customer> customers) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel = (DefaultTableModel) t.getModel();
        tableModel.setRowCount(0);
        
        for (Customer customer : customers) {
            tableModel.addRow(new Object[]{
                customer.getId(),
                customer.getName(),
                customer.getLastName(),
                customer.getIdentification(),
                customer.getCategoryDescription()
            });
        }
    }
}
